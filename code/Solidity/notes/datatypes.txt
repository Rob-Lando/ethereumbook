See: https://docs.soliditylang.org/en/latest/types.html

The concept of "undefined" or "null" values does not exist in Solidity,
but newly declared variables always have a default value dependent on its type.
To handle any unexpected values, 
you should use the revert function to revert the whole transaction, 
or return a tuple with a second bool value denoting success.

Boolean (bool):
    Bolean value with logical operators 
        ! (not)
        && (and)
        || (or)
        == (equal)
        != (not equal)

Integer (int,uint):
    Signed (int) and Unsigned (uint) integers declared in increments of 8 bits, int8 to uint256.
    Without a size suffix, 256-bit is used by default to match the word size of the EVM.

    Operators:
        Comparisons: <=,<,==,!=,>=,> all evaluate to bool
        Bit Operators: &,|,^ (bitwise exclusive or), ~ (bitwise negation)
        Shift operators: << (left shift), >> (right shift)
        Arithmetic operators: +,-,unary - (only for signed integers), *,/,% (mod), ** (exp)

Fixed point (fixed,ufixed):
    Fixed-point numbers declared (u)fixedMxN where M is the size in bit, and N is the number of decimals after the point (18 max)

Address:
    A 20 byte Ethereum address. The address object has many helpful member functions when cast as payable, like .balance() and .transfer().
    .balance() returns the accounts balance in wei
    .transfer() transfers ether to the account, transfers are reverted on failure.
    .send() low level counterpart of transfer. If the execution fails, the current contract will not stop with an exception, but send will return false.

Byte array (fixed):
    Fixed-size arrays of bytes, declared with bytes1 up to bytes32.

