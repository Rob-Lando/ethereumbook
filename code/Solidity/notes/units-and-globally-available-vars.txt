See: https://docs.soliditylang.org/en/latest/units-and-global-variables.html

Ether Units:
    A literal number can take a suffix of wei, gwei, or ether to specify a subdenomination of Ether.
    Ether numbers without a postfix are assumed to be Wei.

 Time Units:
    
    Suffixes like seconds, minutes,hours,days,and weeks after literal numbers can be used to 
    specify units of time where seconds are the base unit.
    
    Due to the fact that leap seconds cannot be predicted,
    an exact calendar library has to be updated by an external oracle.

    These suffixes cannot be applied to variables. 
    For example, if you want to interpret a function parameter in days, you can in the following way:

    function f(uint start, uint daysAfter) public {
        if (block.timestamp >= start + daysAfter * 1 days) {
        // ...
        }
    }

Special Variables and Functions:
    

    blockhash(uint blockNumber) returns (bytes32): hash of the given block when blocknumber is one of the 256 most recent blocks; otherwise returns zero

    block.basefee (uint): current block’s base fee (EIP-3198 and EIP-1559)

    block.chainid (uint): current chain id

    block.coinbase (address payable): current block miner’s address

    block.difficulty (uint): current block difficulty (EVM < Paris). For other EVM versions it behaves as a deprecated alias for block.prevrandao (EIP-4399 )

    block.gaslimit (uint): current block gaslimit

    block.number (uint): current block number

    block.prevrandao (uint): random number provided by the beacon chain (EVM >= Paris)

    block.timestamp (uint): current block timestamp as seconds since unix epoch

    gasleft() returns (uint256): remaining gas

    msg.data (bytes calldata): complete calldata

    msg.sender (address): sender of the message (current call)

    msg.sig (bytes4): first four bytes of the calldata (i.e. function identifier)

    msg.value (uint): number of wei sent with the message

    *** The values of all members of msg, including msg.sender and msg.value can change for every external function call. This includes calls to library functions.***

    tx.gasprice (uint): gas price of the transaction

    tx.origin (address): sender of the transaction (full call chain)

ABI Encoding and Decoding Functions:

    abi.decode(bytes memory encodedData, (...)) returns (...): ABI-decodes the given data, while the types are given in parentheses as second argument. Example: (uint a, uint[2] memory b, bytes memory c) = abi.decode(data, (uint, uint[2], bytes))

    abi.encode(...) returns (bytes memory): ABI-encodes the given arguments

    abi.encodePacked(...) returns (bytes memory): Performs packed encoding of the given arguments. Note that packed encoding can be ambiguous!

    abi.encodeWithSelector(bytes4 selector, ...) returns (bytes memory): ABI-encodes the given arguments starting from the second and prepends the given four-byte selector

    abi.encodeWithSignature(string memory signature, ...) returns (bytes memory): Equivalent to abi.encodeWithSelector(bytes4(keccak256(bytes(signature))), ...)

    abi.encodeCall(function functionPointer, (...)) returns (bytes memory): ABI-encodes a call to functionPointer with the arguments found in the tuple. Performs a full type-check, ensuring the types match the function signature. Result equals abi.encodeWithSelector(functionPointer.selector, (...))

Members of bytes:

    bytes.concat(...) returns (bytes memory): Concatenates variable number of bytes and bytes1, …, bytes32 arguments to one byte array

Members of string:

    string.concat(...) returns (string memory): Concatenates variable number of string arguments to one string array
